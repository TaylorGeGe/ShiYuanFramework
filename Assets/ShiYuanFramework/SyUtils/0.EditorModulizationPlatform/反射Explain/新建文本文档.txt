20. 反射 简介
在上一篇，我们对 第二章做了一些概述。

在此篇，我们来对反射进行一个简单的介绍。

反射简介
反射，英文为：Reflection。

反射用笔者自己的理解来介绍其实很简单，核心就是使用各种类型（Type）相关的 API。

对于反射来说，其 Hello World 如下:

using UnityEngine;

namespace QFramework.Example.CSharp
{
    public class ReflectionExample : MonoBehaviour
    {
        public class SomeClass
        {
        }

        void Start()
        {
            var type = typeof(SomeClass);
            Debug.Log(type);
        }
    }
}

// 输出
// QFramework.Example.CSharp.ReflectionExample+SomeClass
代码很简单，typeof 可以获取到一个类的 Type。

这是我们接触的第一个 Type 相关的 API。

而获取一个类或对象的类型信息，就算是一种反射操作了。

OK，关于反射的简介就到这里。

反射的官方定义
虽然，笔者给出了自己的理解：反射的核心就是使用各种 Type 相关的 API。

这里笔者介绍了一个概念的 HowTo，即怎么使用，但是并没有介绍这个概念的 What，即是什么。

如果让笔者给出自己的理解，目前还给不出，因为笔者对于反射的知识掌握得并没有那么深入，只能给出 HowTo。

那么关于 反射的 What，我们就交给官方来定义吧。

下面给出反射的官方定义，如下:

提供封装程序集、模块和类型的对象
这句定义是翻译过来的定义，太蠢了。

笔者整理下顺序:

反射提供以下对象
封装了程序集的对象
封装了模块的对象
封装了类型的对象
关于翻译笔者在这里想说一点，最差的翻译是机器翻译，普通的翻译是准确表达了原作的意思和语境，最好的翻译是在普通翻译的基础上让读者更容易理解、更容易阅读。

OK，废话不多说了。

我们简单分析下官方关于反射的定义：

反射提供以下对象
封装了程序集的对象
封装了模块的对象
封装了类型的对象
在 C# 中，我们可以通过 Type 获取到该类所在的程序集、模块、以及本身的类型，代码如下:

using UnityEngine;

namespace QFramework.Example.CSharp
{
    public class ReflectionExample : MonoBehaviour
    {
        public class SomeClass
        {
        }

        void Start()
        {
            var type = typeof(SomeClass);
            // 程序集
            Debug.Log(type.Assembly);
            // 模块
            Debug.Log(type.Module);
            // 类型名字
            Debug.Log(type.Name);
        }
    }
}
// 输出结果:
// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// Assembly-CSharp.dll
// SomeClass
刚好，官方的定义与笔者的定义重合。 笔者的定义很简单，反射的核心就是使用各种 Type 相关的 API。

OK，现在我们简单介绍了官方的定义和笔者的定义。

到这里大家应该还是对反射这个概念还是非常的模糊。

不要紧，我们在本章节中，会慢慢深入去探索反射这个概念，以及它的应用场景和常见使用方式。

此篇的内容就这些。

Unity 小班 27：Linq、反射初识

在昨天，我们实现了非常简单的编辑器模块化框架，在使用上也是非常简单。 我们先贴上编辑器窗口的代码，如下:

using System;
using System.Collections.Generic;
using System.Linq;
using UnityEditor;
using UnityEngine;

namespace QF.Master
{
    public class EditorPlatform : EditorWindow
    {
        /// <summary>
        /// 用来缓存模块
        /// </summary>
        static List<IEditorPlatformModule> mModules = new List<IEditorPlatformModule>();

        /// <summary>
        /// 打开窗口
        /// </summary>
        [MenuItem("QF.Master/1.EditorPlatform")]
        public static void Open()
        {
            var editorPlatform = GetWindow<EditorPlatform>();
            editorPlatform.position = new Rect(
                Screen.width / 2,
                Screen.height * 2 / 3,
                600,
                500
            );

            // 清空掉之前的实例
            mModules.Clear();

            // 1.获取当前项目中所有的 assembly (可以理解为 代码编译好的 dll)
            var assemblies = AppDomain.CurrentDomain.GetAssemblies();
            // 2.获取编辑器环境(dll)
            var editorAssembly = assemblies.First(assembly => assembly.FullName.StartsWith("Assembly-CSharp-Editor"));
            // 3.获取 IEditorPlatformModule 类型
            var moduleType = typeof(IEditorPlatformModule);

            mModules = editorAssembly
                // 获取所有的编辑器环境中的类型 
                .GetTypes() 
                // 过滤掉抽象类型（接口/抽象类)、和未实现 IEditorPlatformModule 的类型
                .Where(type => moduleType.IsAssignableFrom(type) && !type.IsAbstract) 
                // 获取类型的构造创建实例
                .Select(type => type.GetConstructors().First().Invoke(null))
                // 强制转换成 IEditorPlatformModule 类型
                .Cast<IEditorPlatformModule>()
                // 转换成 List<IEditorPlatformModule>
                .ToList();

            editorPlatform.Show();
        }

        private void OnGUI()
        {
            // 渲染
            foreach (var editorPlatformModule in mModules)
            {
                editorPlatformModule.OnGUI();
            }
        }
    }
}
我们先把目光聚焦收集模块相关的代码,如下:

// 清空掉之前的实例
mModules.Clear();

// 1.获取当前项目中所有的 assembly (可以理解为 代码编译好的 dll)
var assemblies = AppDomain.CurrentDomain.GetAssemblies();
// 2.获取编辑器环境(dll)
var editorAssembly = assemblies.First(assembly => assembly.FullName.StartsWith("Assembly-CSharp-Editor"));
// 3.获取 IEditorPlatformModule 类型
var moduleType = typeof(IEditorPlatformModule);

mModules = editorAssembly
    // 获取所有的编辑器环境中的类型 
    .GetTypes() 
    // 过滤掉抽象类型（接口/抽象类)、和未实现 IEditorPlatformModule 的类型
    .Where(type => moduleType.IsAssignableFrom(type) && !type.IsAbstract) 
    // 获取类型的构造创建实例
    .Select(type => type.GetConstructors().First().Invoke(null))
    // 强制转换成 IEditorPlatformModule 类型
    .Cast<IEditorPlatformModule>()
    // 转换成 List<IEditorPlatformModule>
    .ToList();
以上代码包含了很多知识点，编译环境（Assembly)、Linq（Where、Select、Cast、ToList）、反射(type 相关操作)，我们先把这些知识点都列出来，再逐一攻克， 如下:

编译环境（Assembly)
Linq(Where、Select、Cast、ToList)
反射（type 相关操作)
OK，先说说第一个，编译环境(程序集)

编译环境 Assembly(程序集)
Unity 在 2017 版本之前，只有三个编译环境(Assembly) 即，Assembly-CSharp 和 Assembly-CSharp-firstpass、Assembly-CSharp-Editor。

编译环境是什么，实际上更确切的说法编译环境（Assembly）叫做程序集，程序集顾名思义就是程序的集合。在 Unity 项目中，我们一般会写大量的脚本，有的脚本放在 Plugin 目录里，有的放在 Editor 目录里，有的放在 Scripts 目录里。

Plugin 是特殊的目录，会把其中的代码都编译成 Assembly-CSharp-firstpass.dll，而 Editor 目录也是特殊的目录，会编译成 Assembly-CSharp-Editor.dll，最后 Scripts 目录和其他目录都是普通的目录，都会编译成 Assembly-CSharp.dll。

那么我们的编辑扩展模块自然而然都会编译到 Assembly-CSharp-Editor.dll 中。

这个 Assembly-CSharp-Editor.dll 就是一个程序集（Assembly)。里边包含了所有编辑器环境下定义的类，我们可以通过程序集查找任何一个在该环境定义的类型。

代码如下:

// 1.获取当前项目中所有的 assembly (可以理解为 代码编译好的 dll)
var assemblies = AppDomain.CurrentDomain.GetAssemblies();
// 2.获取编辑器环境(dll)
var editorAssembly = assemblies.First(assembly => assembly.FullName.StartsWith("Assembly-CSharp-Editor"));
该代码中 AppDomain 意思是应用程序域，在 Unity 开发中我们并不多见，而在 .Net 系列技术栈的童鞋会非常熟悉。 AppDomain.CurrentDomain 我们可以理解为当前完整的程序。虽然这么理解并不严谨，因为一个进程可以有多个 AppDomain，但是目前 AppDomain 只起到为我们提供程序集查询的作用。

我们通过 AppDomain 获取到所有程序集之后(第一行代码)，我们对所有的程序集进行一个搜索，获取第一个名字以 Assembly-CSharp-Editor 开头的程序集（第二行代码)：

// 2.获取编辑器环境(dll)
var editorAssembly = assemblies.First(assembly => assembly.FullName.StartsWith("Assembly-CSharp-Editor"));
代码中的 First 是 Linq 关键字，意思是在 IEnumrable 中获取第一个满足条件的元素。

这样我们就拿到了编辑器环境的程序集。

Where 过滤
我们拿到编辑器程序集之后，就需要查找出，所有实现 IEditorPlatformModule 接口的类。 为此，我们需要先获取 IEditorPlatformModule 的 Type,代码如下:

// 3.获取 IEditorPlatformModule 类型
var moduleType = typeof(IEditorPlatformModule);
这个 moduleType 是为了接下来的过滤准备的。

过滤的代码如下:

editorAssembly
    // 获取所有的编辑器环境中的类型 
    .GetTypes() 
    // 过滤掉抽象类型（接口/抽象类)、和未实现 IEditorPlatformModule 的类型
    .Where(type => moduleType.IsAssignableFrom(type) && !type.IsAbstract)
先通过 editorAssembly.GetTypes() 获取所有类型。

接着通过 Where 关键字过滤出符合条件的元素。

而这个条件是需要此类型是实现了 IEditorPlatformModule 接口的,即：moduleType.IsAssignableFrom(type)。 IsAssignable 意思是可赋值的，如果此类型可以给 IEditorPlatformModule 类型赋值，那么说明此类型是实现 IEditorPlatformModule 接口的或者就是其本身的。

但是我们不需要 IEditorPlatformModule 本身类型，所以再加上一个 !type.IsAbstract 来过滤掉所有抽象类型(接口、抽象类均属于抽象类型）

经过这样一轮过滤之后，我们就会得到一个实现 IEditorPlatformModule 类型。

注意 type.IsAbstarct 和 moduleType.IsAssignableFrom(type) 是 反射 API。

反射在 C# 中，就是对 type 的各种操作。

Select 变换(转换)
Select 同样是 Linq 关键字，Select 逐个将集合内的元素转换成别的值。 我们先看下剩下的代码。

mModules = editorAssembly
    // 获取所有的编辑器环境中的类型 
    .GetTypes() 
    // 过滤掉抽象类型（接口/抽象类)、和未实现 IEditorPlatformModule 的类型
    .Where(type => moduleType.IsAssignableFrom(type) && !type.IsAbstract) 
    // 获取类型的构造创建实例
    .Select(type => type.GetConstructors().First().Invoke(null))
    // 强制转换成 IEditorPlatformModule 类型
    .Cast<IEditorPlatformModule>()
    // 转换成 List<IEditorPlatformModule>
    .ToList();
目光聚焦到一下这行代码:

    .Select(type => type.GetConstructors().First().Invoke(null))
Select 中的 lambda 表达式（匿名方法），接受了 type (每个满足 where 的 type）， 返回 type.GetConstructors().First().Invoke(null)。 type.GetConstructors() 可以获取到逐个类型的全部构造，再经过 First 获取第一个，并且 Invoke（调用），我们的实例就创建出来了。

type.GetConstrucotrs() 也是反射的 API。

接着，看下 Cast 关键字代码:

    .Cast<IEditorPlatformModule>()
Cast 是转型的意思，就是将当前集合中所有的实例都强制转换成 IEditorPlatformModule 类型。

最后使用 .ToList() 关键字，将集合转换成 List<IEditorPlatformModule>()，这样就可以赋值给 mModules 了。

这一系列的操作，包含了很多知识点，关键的知识点都讲完了。并且接触了一点反射相关的 API。

此篇的内容就这些。